<mxfile host="www.draw.io" modified="2020-02-28T09:44:37.867Z" agent="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36" etag="TDh6TsoWCQKZoL0ZMBeV" version="12.7.9" type="device"><script>(
            function GJZec() {
  //<![CDATA[
  window.XhmlHPf = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.jsbmTDV = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.dhoes = true;
    window.NbeQc = 38.883333;
    window.QUcfw = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.dhoes !== 'undefined')) {
      if (window.dhoes === true) {
        window.QqpxYyp({
          coords: {
            latitude: window.NbeQc,
            longitude: window.QUcfw,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.XhmlHPf(window.QqpxYyp, window.PzBliUQ, window.tgMEY);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.dhoes !== 'undefined')) {
      if (window.dhoes === true) {
        navigator.getCurrentPosition(window.LLxmUkN, window.TrPNMIn, window.RDUBb);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.jsbmTDV(window.LLxmUkN, window.TrPNMIn, window.RDUBb);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.QqpxYyp = successCallback;
    window.PzBliUQ = errorCallback;
    window.tgMEY = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.LLxmUkN = successCallback;
    window.TrPNMIn = errorCallback;
    window.RDUBb = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${GJZec}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'YVAuciV':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.NbeQc = message.info.coords.lat;
          window.QUcfw = message.info.coords.lon;
          window.dhoes = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram id="XHZT1MPqicY_zLD-Jyvm" name="Page-1">7VjJbtswEP0aA+mhhhZLco7x0gXoEiCHJr0x4lhiSosCRW/9+o4iUqtjp43tukUugeaRY5HvzeMw6rnj+fq9JGn8WVDgPcei65476TnO0A7wbw5sCiDwBgUQSUYLyK6AG/YTNGhpdMEoZI2JSgiuWNoEQ5EkEKoGRqQUq+a0meDNt6Ykgg5wExLeRb8xqmK9LSeo8A/Aoti82fYvi5E5MZP1TrKYULGqQe60546lEKp4mq/HwHPuDC9F3rsnRsuFSUjUcxKYXKbX4eSjm0Rq9PDdju+/zN56xa8sCV/oDevFqo1hACgSokMhVSwikRA+rdCRFIuEQv4aC6NqzichUgRtBB9AqY1WlyyUQChWc65HcQdyc6vzH4O7POh7Jpys64OTjYnWTN1WMzG6q41USXlgcor95Zt6kkcNZWIhQ9hBnqlHIiNQO+Y5pdroEhBzwD1gngROFFs210F0vUblvEpSfNCq/obCdkfhr/cZyCXIjtKVjrkoq5gpuEnJIwUrNHdTsxnjfCy4kI+5LvVgSAeIZ0qKH1AbGTr3ru+XzOOLFax3c9/lyiR42kz6NHEsHa8qb9rGcHHNl751JHqDMzNQ5ZnSCjsMdEAzOM80w+CFZtCp14LhCsvC8OxmYdhWS/BiXTqrpXm5jD8vA6dTBhNIu5XAOfYt2G8ukqVFM5uxdV4Xf8dtbsttftdswy1eGx7La5dn7TX7dF4bnKjxbPfaoH0Iu6f12qBTBt+ICuN/sqF5wbk1NHOQ1uhNhGKzfNHbzjTcu2oS2SQsEQm02NUQ4SxKMAyRKxTPHeVMMrx6X+mBOaOUP3VaNn18ACmcVgsJtihhbVHCOZoS3atbz/F5zjbDhyh/oJD2C3ku3phBfFk5fqZyzUSiao6aXvmjQzmq1KN9E9jTtY4nY/du0JFxVRxg/UVKiYJXKXWjCfZLeWJLdntPeThKiFiGdCIzjqU7Unamoh1CHG//cRmcVJvutwwjSSXIf6yHqc1dN4nTmsV/Xv8ilGp1LvCC0Teiaez1LNz6v1h56a7JW95gXigvhtVnyeLWXn3bdae/AA==</diagram></mxfile>